
openapi: 3.0.3
info:
  title: User API
  version: 1.0.0
  description: User API
servers:
  - url: http://localhost:3000
    description: Local server
paths:
  /:
    get:
      summary: Hello Worlds
      description: Hello Worlds
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                type: string
                example: Hello Worlds
  /users/v1:
    get:
      summary: Get users
      description: Get users
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      summary: Create user
      description: Create user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequest'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /users/v1/{id}:
    get:
      summary: Get user by id
      description: Get user by id
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            example: 123e4567-e89b-12d3-a456-426614174000
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      summary: Update user by id
      description: Update user by id
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            example: 123e4567-e89b-12d3-a456-426614174000
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      summary: Delete user by id
      description: Delete user by id
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            example: 123e4567-e89b-12d3-a456-426614174000
      responses:
        '200':
          description: No Content
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
components:
  schemas:
    UserResponse:
      type: object
      properties:
        id:
          type: string
          example: 123e4567-e89b-12d3-a456-426614174000
        name:
          type: string
          example: John Doe
        email:
          type: string
          example:
        role:
          type: string
          example: user
        created_at:
          type: string
          format: date-time
          example: '2020-01-01T00:00:00.000Z'
        updated_at:
          type: string
          format: date-time
          example: 2020-01-01T00:00:00.000Z'
    UserRequest:
      type: object
      properties:
        name:
          type: string
          example: John Doe
        email:
          type: string
          example:
        role:
          type: string
          example: user
        password:
          type: string
          example: password
    ErrorResponse:
      type: object
      required:
        - message
      properties:
        message:
          type: string
        errors:
          $ref: '#/components/schemas/ArrayOfErrors'
    ArrayOfErrors:
      nullable: true
      type: array
      items:
        oneOf:
          - type: string
          - type: object